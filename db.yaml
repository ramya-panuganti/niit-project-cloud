AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AZ1: 
    Type: "AWS::EC2::AvailabilityZone::Name"
  AZ2:
    Type: "AWS::EC2::AvailabilityZone::Name"
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  MyKeyPair: 
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.20.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC
  PUBSUBNET1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref AZ1
      Tags:
        - Key: Name
          Value: PUBLICSUBNET-1
  PUBSUBNET2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref AZ2
      Tags:
        - Key: Name
          Value: PUBLICSUBNET-2
  PVTSUBNET1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.3.0/24
      AvailabilityZone: !Ref AZ1
      Tags:
        - Key: Name
          Value: PRIVATESUBNET-1
  PVTSUBNET2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.4.0/24
      AvailabilityZone: !Ref AZ2
      Tags:
        - Key: Name
          Value: PRIVATESUBNET-2
  INTERNETGATEWAY:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: INT-GWAY
  VPCGATEWAYATTACHMENT:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref INTERNETGATEWAY
  PUBLICROUTETABLE:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PUBROUTE:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGATEWAYATTACHMENT
    Properties:
      RouteTableId: !Ref PUBLICROUTETABLE
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref INTERNETGATEWAY
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PUBLICROUTETABLE
      SubnetId: !Ref PUBSUBNET1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PUBLICROUTETABLE
      SubnetId: !Ref PUBSUBNET2
  PVTROUTETABLE:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PVTROUTETABLE
      SubnetId: !Ref PVTSUBNET1
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PVTROUTETABLE
      SubnetId: !Ref PVTSUBNET2
  LBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http and https to load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: LOADBALANCER-SG
  WORDPRESSSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow ssh,http,https for wordpress instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 49.37.155.80/32
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LBSG
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LBSG
      Tags:
        - Key: Name
          Value: WORDPRESS-INSTANCE-SG
  RDSSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow rds access to database instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WORDPRESSSG
      Tags:
        - Key: Name
          Value: DATABASE-INSTANCE-SG
  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: true
      Name: MyTargets
      TargetType: instance
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      ProtocolVersion: HTTP1
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
  Loadbalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: LOADBALANCER-WORDPRESS
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref LBSG
      Subnets: 
        - !Ref PUBSUBNET1
        - !Ref PUBSUBNET2
      Type: application
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref Loadbalancer
      Port: '80'
      Protocol: HTTP
  myLaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref LatestAmiId
      KeyName: !Ref MyKeyPair
      SecurityGroups: 
        - !Ref WORDPRESSSG
      InstanceType: t2.micro
      LaunchConfigurationName: Instanceconfiguration
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install httpd php php-mysql -y
          cd /var/www/html
          echo "healthy" > healthy.html
          wget https://wordpress.org/wordpress-5.1.1.tar.gz
          tar -xzf wordpress-5.1.1.tar.gz
          cp -r wordpress/* /var/www/html/
          rm -rf wordpress
          rm -rf wordpress-5.1.1.tar.gz
          chmod -R 755 wp-content
          chown -R apache:apache wp-content
          wget https://s3.amazonaws.com/bucketforwordpresslab-donotdelete/htaccess.txt
          mv htaccess.txt .htaccess
          chkconfig httpd on
          service httpd start
  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ASGroup-wordpress
      LaunchConfigurationName: !Ref myLaunchConfig
      VPCZoneIdentifier: 
        - !Ref PUBSUBNET1
        - !Ref PUBSUBNET2
      TargetGroupARNs: 
        - !Ref MyTargetGroup
      MaxSize: '2'
      MinSize: '2'
      DesiredCapacity: '2'
  myDBSubnetGroup: 
    Type: 'AWS::RDS::DBSubnetGroup' 
    Properties:
      DBSubnetGroupDescription: description of subnets for database
      SubnetIds: 
        - !Ref PVTSUBNET1
        - !Ref PVTSUBNET2
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: mariadb-database
      DBName: mydb
      Engine: mariadb
      EngineVersion: 10.6
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t2.micro
      StorageType: gp2
      AllocatedStorage: 20
      MaxAllocatedStorage: 1000
      MultiAZ: true
      DBSubnetGroupName: !Ref myDBSubnetGroup
      VPCSecurityGroups: 
        - !Ref RDSSG